// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
  CreateUserData,
  CreateUserResponse,
  GetMeResponse,
  GetUserDataData,
  GetUserDataResponse,
  GetUserByIdData,
  GetUserByIdResponse,
  CreateCommentData,
  CreateCommentResponse,
  FindAllCommentsData,
  FindAllCommentsResponse,
  FindCommentByIdData,
  FindCommentByIdResponse,
  UpdateCommentData,
  UpdateCommentResponse,
  DeleteCommentData,
  DeleteCommentResponse,
  VoteCommentData,
  VoteCommentResponse,
  UnvoteCommentData,
  UnvoteCommentResponse,
  CreateCommunityData,
  CreateCommunityResponse,
  FindAllCommunitiesResponse,
  CheckUserMembershipData,
  CheckUserMembershipResponse,
  FindUserCommunitiesResponse,
  FindOneCommunityData,
  FindOneCommunityResponse,
  UpdateCommunityData,
  UpdateCommunityResponse,
  RemoveCommunityData,
  RemoveCommunityResponse,
  JoinCommunityData,
  JoinCommunityResponse,
  LeaveCommunityData,
  LeaveCommunityResponse,
  GetFeedData,
  GetFeedResponse,
  CreatePostData,
  CreatePostResponse,
  FindAllPostsResponse,
  FindAllPostsByUserData,
  FindAllPostsByUserResponse,
  FindAllPostsInCommunityData,
  FindAllPostsInCommunityResponse,
  FindOnePostData,
  FindOnePostResponse,
  UpdatePostData,
  UpdatePostResponse,
  RemovePostData,
  RemovePostResponse,
  VotePostData,
  VotePostResponse,
  UnvotePostData,
  UnvotePostResponse,
  CreateReplyData,
  CreateReplyResponse,
  FindAllRepliesData,
  FindAllRepliesResponse,
  FindOneReplyData,
  FindOneReplyResponse,
  UpdateReplyData,
  UpdateReplyResponse,
  DeleteReplyData,
  DeleteReplyResponse,
  VoteReplyData,
  VoteReplyResponse,
  UnvoteReplyData,
  UnvoteReplyResponse,
} from "./types.gen";

export class UsersService {
  /**
   * Create a new user using a Firebase ID token
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Created
   * @throws ApiError
   */
  public static createUser(
    data: CreateUserData
  ): CancelablePromise<CreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/users",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Unauthorized",
      },
    });
  }

  /**
   * Get the current user
   * This endpoint is used by the client to get the current user. Returns 204 if the authenticated user doesn't have a profile.
   * @returns User OK
   * @returns void No content
   * @throws ApiError
   */
  public static getMe(): CancelablePromise<GetMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/me",
      errors: {
        401: "Unauthorized",
      },
    });
  }

  /**
   * Get aggregated user data for the current user
   * This endpoint is used by the client to get user data such as posts, comments, and votes for the current user.
   * @param data The data for the request.
   * @param data.include The data to include in the response
   * @returns unknown OK
   * @throws ApiError
   */
  public static getUserData(
    data: GetUserDataData = {}
  ): CancelablePromise<GetUserDataResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/userdata",
      query: {
        include: data.include,
      },
      errors: {
        401: "Unauthorized",
      },
    });
  }

  /**
   * Get a user's profile by ID
   * @param data The data for the request.
   * @param data.id
   * @returns User OK
   * @throws ApiError
   */
  public static getUserById(
    data: GetUserByIdData
  ): CancelablePromise<GetUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/{id}",
      path: {
        id: data.id,
      },
      errors: {
        404: "Not found",
      },
    });
  }
}

export class CommentsService {
  /**
   * Add a comment to a post
   * @param data The data for the request.
   * @param data.postId
   * @param data.requestBody
   * @returns CommentResponse Created
   * @throws ApiError
   */
  public static createComment(
    data: CreateCommentData
  ): CancelablePromise<CreateCommentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/comments/{postId}",
      path: {
        postId: data.postId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Get all comments for a post
   * @param data The data for the request.
   * @param data.postId
   * @param data.sortBy
   * @param data.timespan
   * @param data.skip
   * @param data.take
   * @returns CommentResponse OK
   * @throws ApiError
   */
  public static findAllComments(
    data: FindAllCommentsData
  ): CancelablePromise<FindAllCommentsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/comments/posts/{postId}",
      path: {
        postId: data.postId,
      },
      query: {
        sortBy: data.sortBy,
        timespan: data.timespan,
        skip: data.skip,
        take: data.take,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Get a comment by ID
   * @param data The data for the request.
   * @param data.commentId
   * @returns CommentResponse OK
   * @throws ApiError
   */
  public static findCommentById(
    data: FindCommentByIdData
  ): CancelablePromise<FindCommentByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/comments/{commentId}",
      path: {
        commentId: data.commentId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Update a comment
   * @param data The data for the request.
   * @param data.commentId
   * @param data.requestBody
   * @returns CommentResponse OK
   * @throws ApiError
   */
  public static updateComment(
    data: UpdateCommentData
  ): CancelablePromise<UpdateCommentResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/comments/{commentId}",
      path: {
        commentId: data.commentId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Delete a comment
   * @param data The data for the request.
   * @param data.commentId
   * @returns void No content
   * @throws ApiError
   */
  public static deleteComment(
    data: DeleteCommentData
  ): CancelablePromise<DeleteCommentResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/comments/{commentId}",
      path: {
        commentId: data.commentId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Vote a comment up or down
   * @param data The data for the request.
   * @param data.id
   * @param data.isUpvote
   * @returns void No content
   * @throws ApiError
   */
  public static voteComment(
    data: VoteCommentData
  ): CancelablePromise<VoteCommentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/comments/{id}/vote",
      path: {
        id: data.id,
      },
      query: {
        isUpvote: data.isUpvote,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Remove a vote from a comment
   * @param data The data for the request.
   * @param data.id
   * @returns void No content
   * @throws ApiError
   */
  public static unvoteComment(
    data: UnvoteCommentData
  ): CancelablePromise<UnvoteCommentResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/comments/{id}/unvote",
      path: {
        id: data.id,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }
}

export class CommunitiesService {
  /**
   * Create a new community
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Community Created
   * @throws ApiError
   */
  public static createCommunity(
    data: CreateCommunityData
  ): CancelablePromise<CreateCommunityResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/communities",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Unauthorized",
      },
    });
  }

  /**
   * Find all communities the user can see
   * @returns Community OK
   * @throws ApiError
   */
  public static findAllCommunities(): CancelablePromise<FindAllCommunitiesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/communities",
      errors: {
        401: "Unauthorized",
      },
    });
  }

  /**
   * Check if a user is a member of a community
   * @param data The data for the request.
   * @param data.id
   * @returns string OK
   * @throws ApiError
   */
  public static checkUserMembership(
    data: CheckUserMembershipData
  ): CancelablePromise<CheckUserMembershipResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/communities/{id}/membership",
      path: {
        id: data.id,
      },
      errors: {
        401: "Unauthorized",
        404: "Community not found",
      },
    });
  }

  /**
   * Find all communities that the current user is a member of
   * @returns Community OK
   * @throws ApiError
   */
  public static findUserCommunities(): CancelablePromise<FindUserCommunitiesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/communities/me",
      errors: {
        401: "Unauthorized",
      },
    });
  }

  /**
   * Find a community by ID
   * @param data The data for the request.
   * @param data.id
   * @returns Community OK
   * @throws ApiError
   */
  public static findOneCommunity(
    data: FindOneCommunityData
  ): CancelablePromise<FindOneCommunityResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/communities/{id}",
      path: {
        id: data.id,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Update a community
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns Community OK
   * @throws ApiError
   */
  public static updateCommunity(
    data: UpdateCommunityData
  ): CancelablePromise<UpdateCommunityResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/communities/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Delete a community
   * @param data The data for the request.
   * @param data.id
   * @returns void No content
   * @throws ApiError
   */
  public static removeCommunity(
    data: RemoveCommunityData
  ): CancelablePromise<RemoveCommunityResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/communities/{id}",
      path: {
        id: data.id,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Join a community
   * @param data The data for the request.
   * @param data.id
   * @returns void No content
   * @throws ApiError
   */
  public static joinCommunity(
    data: JoinCommunityData
  ): CancelablePromise<JoinCommunityResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/communities/{id}/join",
      path: {
        id: data.id,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Leave a community
   * @param data The data for the request.
   * @param data.id
   * @returns void No content
   * @throws ApiError
   */
  public static leaveCommunity(
    data: LeaveCommunityData
  ): CancelablePromise<LeaveCommunityResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/communities/{id}/leave",
      path: {
        id: data.id,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }
}

export class PostsService {
  /**
   * Get a personalized feed of posts for the current user
   * @param data The data for the request.
   * @param data.sortBy
   * @param data.timespan
   * @param data.skip
   * @param data.take
   * @returns PostResponse OK
   * @throws ApiError
   */
  public static getFeed(
    data: GetFeedData = {}
  ): CancelablePromise<GetFeedResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/posts/feed",
      query: {
        sortBy: data.sortBy,
        timespan: data.timespan,
        skip: data.skip,
        take: data.take,
      },
      errors: {
        401: "Unauthorized",
      },
    });
  }

  /**
   * Create a new post in a community
   * @param data The data for the request.
   * @param data.communityId
   * @param data.requestBody
   * @returns PostResponse Created
   * @throws ApiError
   */
  public static createPost(
    data: CreatePostData
  ): CancelablePromise<CreatePostResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/posts/{communityId}",
      path: {
        communityId: data.communityId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Find all posts from communities the user can access
   * @returns PostResponse OK
   * @throws ApiError
   */
  public static findAllPosts(): CancelablePromise<FindAllPostsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/posts/all",
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Find all posts by a user
   * @param data The data for the request.
   * @param data.userId
   * @param data.sortBy
   * @param data.timespan
   * @param data.skip
   * @param data.take
   * @returns PostResponse OK
   * @throws ApiError
   */
  public static findAllPostsByUser(
    data: FindAllPostsByUserData
  ): CancelablePromise<FindAllPostsByUserResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/posts/user/{userId}",
      path: {
        userId: data.userId,
      },
      query: {
        sortBy: data.sortBy,
        timespan: data.timespan,
        skip: data.skip,
        take: data.take,
      },
      errors: {
        401: "Unauthorized",
      },
    });
  }

  /**
   * Find all posts in a community
   * @param data The data for the request.
   * @param data.communityId
   * @param data.sortBy
   * @param data.timespan
   * @param data.skip
   * @param data.take
   * @returns PostResponse OK
   * @throws ApiError
   */
  public static findAllPostsInCommunity(
    data: FindAllPostsInCommunityData
  ): CancelablePromise<FindAllPostsInCommunityResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/posts/community/{communityId}",
      path: {
        communityId: data.communityId,
      },
      query: {
        sortBy: data.sortBy,
        timespan: data.timespan,
        skip: data.skip,
        take: data.take,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Find a post by ID
   * @param data The data for the request.
   * @param data.id
   * @returns PostResponse OK
   * @throws ApiError
   */
  public static findOnePost(
    data: FindOnePostData
  ): CancelablePromise<FindOnePostResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/posts/{id}",
      path: {
        id: data.id,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Update a post
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns PostResponse OK
   * @throws ApiError
   */
  public static updatePost(
    data: UpdatePostData
  ): CancelablePromise<UpdatePostResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/posts/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Delete a post
   * @param data The data for the request.
   * @param data.id
   * @returns void No content
   * @throws ApiError
   */
  public static removePost(
    data: RemovePostData
  ): CancelablePromise<RemovePostResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/posts/{id}",
      path: {
        id: data.id,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Vote a post up or down
   * @param data The data for the request.
   * @param data.id
   * @param data.isUpvote
   * @returns void No content
   * @throws ApiError
   */
  public static votePost(
    data: VotePostData
  ): CancelablePromise<VotePostResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/posts/{id}/vote",
      path: {
        id: data.id,
      },
      query: {
        isUpvote: data.isUpvote,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Remove a vote from a post
   * @param data The data for the request.
   * @param data.id
   * @returns void No content
   * @throws ApiError
   */
  public static unvotePost(
    data: UnvotePostData
  ): CancelablePromise<UnvotePostResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/posts/{id}/unvote",
      path: {
        id: data.id,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }
}

export class RepliesService {
  /**
   * Add a reply to a comment
   * @param data The data for the request.
   * @param data.commentId
   * @param data.requestBody
   * @returns ReplyResponse Created
   * @throws ApiError
   */
  public static createReply(
    data: CreateReplyData
  ): CancelablePromise<CreateReplyResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/replies/{commentId}",
      path: {
        commentId: data.commentId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Get all replies for a comment
   * @param data The data for the request.
   * @param data.commentId
   * @returns ReplyResponse OK
   * @throws ApiError
   */
  public static findAllReplies(
    data: FindAllRepliesData
  ): CancelablePromise<FindAllRepliesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/replies/comments/{commentId}",
      path: {
        commentId: data.commentId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Get a reply by id
   * @param data The data for the request.
   * @param data.replyId
   * @returns ReplyResponse OK
   * @throws ApiError
   */
  public static findOneReply(
    data: FindOneReplyData
  ): CancelablePromise<FindOneReplyResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/replies/{replyId}",
      path: {
        replyId: data.replyId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Update a reply
   * @param data The data for the request.
   * @param data.replyId
   * @param data.requestBody
   * @returns ReplyResponse OK
   * @throws ApiError
   */
  public static updateReply(
    data: UpdateReplyData
  ): CancelablePromise<UpdateReplyResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/replies/{replyId}",
      path: {
        replyId: data.replyId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Delete a reply
   * @param data The data for the request.
   * @param data.replyId
   * @returns void No content
   * @throws ApiError
   */
  public static deleteReply(
    data: DeleteReplyData
  ): CancelablePromise<DeleteReplyResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/replies/{replyId}",
      path: {
        replyId: data.replyId,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Vote a reply up or down
   * @param data The data for the request.
   * @param data.id
   * @param data.isUpvote
   * @returns void No content
   * @throws ApiError
   */
  public static voteReply(
    data: VoteReplyData
  ): CancelablePromise<VoteReplyResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/replies/{id}/vote",
      path: {
        id: data.id,
      },
      query: {
        isUpvote: data.isUpvote,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }

  /**
   * Remove a vote from a reply
   * @param data The data for the request.
   * @param data.id
   * @returns void No content
   * @throws ApiError
   */
  public static unvoteReply(
    data: UnvoteReplyData
  ): CancelablePromise<UnvoteReplyResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/replies/{id}/unvote",
      path: {
        id: data.id,
      },
      errors: {
        401: "Unauthorized",
        404: "Not found",
      },
    });
  }
}
