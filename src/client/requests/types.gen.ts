// This file is auto-generated by @hey-api/openapi-ts

export type CreateUserRequest = {
  name: string;
  photoUrl?: string;
};

export type User = {
  id: number;
  firebaseUid: string;
  email: string;
  name: string;
  photoUrl?: string;
  createdAt: string;
  updatedAt: string;
};

export type ErrorResponse = {
  statusCode: number;
  timestamp: string;
  path: string;
  message: string | Array<string>;
};

export type Vote = {
  id: number;
  voterId: number;
  postId?: number;
  commentId?: number;
  isUpvote: boolean;
};

export type CreateCommentRequest = {
  content: string;
  parentId?: number;
};

export type Comment = {
  id: number;
  content: string;
  authorId: number;
  parentId?: number;
  children: Array<unknown[]>;
  postId: number;
  votes: number;
  createdAt: string;
  updatedAt: string;
};

export type UpdateCommentRequest = {
  content?: string;
};

export type CreateCommunityRequest = {
  name: string;
  description: string;
};

export type Community = {
  id: number;
  name: string;
  description: string;
  isPrivate: boolean;
  ownerId: number;
  createdAt: string;
  updatedAt: string;
};

export type UpdateCommunityRequest = {
  name?: string;
  description?: string;
};

export type SortBy = "new" | "top";

export const SortBy = {
  NEW: "new",
  TOP: "top",
} as const;

export type Timespan = "day" | "week" | "month" | "year" | "all-time";

export const Timespan = {
  DAY: "day",
  WEEK: "week",
  MONTH: "month",
  YEAR: "year",
  ALL_TIME: "all-time",
} as const;

export type PostResponse = {
  id: number;
  title: string;
  content: string;
  communityId: number;
  communityName: string;
  upvoted: boolean | null;
  authorId: number;
  votes: number;
  createdAt: string;
  updatedAt: string;
};

export type CreatePostRequest = {
  title: string;
  content: string;
};

export type UpdatePostRequest = {
  title?: string;
  content?: string;
};

export type CreateUserData = {
  requestBody: CreateUserRequest;
};

export type CreateUserResponse = User;

export type GetMeResponse = User | void;

export type GetUserDataData = {
  /**
   * The data to include in the response
   */
  include?: Array<"posts" | "votes">;
};

export type GetUserDataResponse = Array<PostResponse | Vote>;

export type CreateCommentData = {
  postId: number;
  requestBody: CreateCommentRequest;
};

export type CreateCommentResponse = Comment;

export type FindAllCommentsData = {
  /**
   * The depth of the comment tree to return
   */
  depth?: number;
  postId: number;
};

export type FindAllCommentsResponse = Array<Comment>;

export type FindCommentByIdData = {
  commentId: number;
  /**
   * The depth of the comment tree to return
   */
  depth?: number;
};

export type FindCommentByIdResponse = Comment;

export type UpdateCommentData = {
  commentId: number;
  requestBody: UpdateCommentRequest;
};

export type UpdateCommentResponse = Comment;

export type DeleteCommentData = {
  commentId: number;
};

export type DeleteCommentResponse = void;

export type UpvoteCommentData = {
  id: number;
};

export type UpvoteCommentResponse = void;

export type DownvoteCommentData = {
  id: number;
};

export type DownvoteCommentResponse = void;

export type UnvoteCommentData = {
  id: number;
};

export type UnvoteCommentResponse = void;

export type CreateCommunityData = {
  requestBody: CreateCommunityRequest;
};

export type CreateCommunityResponse = Community;

export type FindAllCommunitiesResponse = Array<Community>;

export type FindUserCommunitiesResponse = Array<Community>;

export type FindOneCommunityData = {
  id: number;
};

export type FindOneCommunityResponse = Community;

export type UpdateCommunityData = {
  id: number;
  requestBody: UpdateCommunityRequest;
};

export type UpdateCommunityResponse = Community;

export type RemoveCommunityData = {
  id: number;
};

export type RemoveCommunityResponse = void;

export type JoinCommunityData = {
  id: number;
};

export type JoinCommunityResponse = void;

export type LeaveCommunityData = {
  id: number;
};

export type LeaveCommunityResponse = void;

export type GetFeedData = {
  skip?: number;
  sortBy?: SortBy;
  take?: number;
  timespan?: Timespan;
};

export type GetFeedResponse = Array<PostResponse>;

export type CreatePostData = {
  communityId: number;
  requestBody: CreatePostRequest;
};

export type CreatePostResponse = PostResponse;

export type FindAllPostsByUserData = {
  skip?: number;
  sortBy?: SortBy;
  take?: number;
  timespan?: Timespan;
  userId: number;
};

export type FindAllPostsByUserResponse = Array<PostResponse>;

export type FindAllPostsData = {
  communityId: number;
  skip?: number;
  sortBy?: SortBy;
  take?: number;
  timespan?: Timespan;
};

export type FindAllPostsResponse = Array<PostResponse>;

export type FindOnePostData = {
  id: number;
};

export type FindOnePostResponse = PostResponse;

export type UpdatePostData = {
  id: number;
  requestBody: UpdatePostRequest;
};

export type UpdatePostResponse = PostResponse;

export type RemovePostData = {
  id: number;
};

export type RemovePostResponse = void;

export type VotePostData = {
  id: number;
  isUpvote: boolean;
};

export type VotePostResponse = void;

export type UnvotePostData = {
  id: number;
};

export type UnvotePostResponse = void;

export type $OpenApiTs = {
  "/users": {
    post: {
      req: CreateUserData;
      res: {
        /**
         * Created
         */
        201: User;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  "/users/me": {
    get: {
      res: {
        /**
         * OK
         */
        200: User;
        /**
         * No content
         */
        204: void;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  "/users/userdata": {
    get: {
      req: GetUserDataData;
      res: {
        /**
         * OK
         */
        200: Array<PostResponse | Vote>;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  "/comments/{postId}": {
    post: {
      req: CreateCommentData;
      res: {
        /**
         * Created
         */
        201: Comment;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/comments/posts/{postId}": {
    get: {
      req: FindAllCommentsData;
      res: {
        /**
         * OK
         */
        200: Array<Comment>;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/comments/{commentId}": {
    get: {
      req: FindCommentByIdData;
      res: {
        /**
         * OK
         */
        200: Comment;
        /**
         * Not found
         */
        404: unknown;
      };
    };
    patch: {
      req: UpdateCommentData;
      res: {
        /**
         * OK
         */
        200: Comment;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
    delete: {
      req: DeleteCommentData;
      res: {
        /**
         * No content
         */
        204: void;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/comments/{id}/upvote": {
    post: {
      req: UpvoteCommentData;
      res: {
        /**
         * No content
         */
        204: void;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/comments/{id}/downvote": {
    post: {
      req: DownvoteCommentData;
      res: {
        /**
         * No content
         */
        204: void;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/comments/{id}/unvote": {
    delete: {
      req: UnvoteCommentData;
      res: {
        /**
         * No content
         */
        204: void;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/communities": {
    post: {
      req: CreateCommunityData;
      res: {
        /**
         * Created
         */
        201: Community;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
    get: {
      res: {
        /**
         * OK
         */
        200: Array<Community>;
      };
    };
  };
  "/communities/me": {
    get: {
      res: {
        /**
         * OK
         */
        200: Array<Community>;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  "/communities/{id}": {
    get: {
      req: FindOneCommunityData;
      res: {
        /**
         * OK
         */
        200: Community;
        /**
         * Not found
         */
        404: unknown;
      };
    };
    patch: {
      req: UpdateCommunityData;
      res: {
        /**
         * OK
         */
        200: Community;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
    delete: {
      req: RemoveCommunityData;
      res: {
        /**
         * No content
         */
        204: void;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/communities/{id}/join": {
    post: {
      req: JoinCommunityData;
      res: {
        /**
         * No content
         */
        204: void;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/communities/{id}/leave": {
    post: {
      req: LeaveCommunityData;
      res: {
        /**
         * No content
         */
        204: void;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/posts/feed": {
    get: {
      req: GetFeedData;
      res: {
        /**
         * OK
         */
        200: Array<PostResponse>;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  "/posts/{communityId}": {
    post: {
      req: CreatePostData;
      res: {
        /**
         * Created
         */
        201: PostResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/posts/user/{userId}": {
    get: {
      req: FindAllPostsByUserData;
      res: {
        /**
         * OK
         */
        200: Array<PostResponse>;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  "/posts/community/{communityId}": {
    get: {
      req: FindAllPostsData;
      res: {
        /**
         * OK
         */
        200: Array<PostResponse>;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/posts/{id}": {
    get: {
      req: FindOnePostData;
      res: {
        /**
         * OK
         */
        200: PostResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
    patch: {
      req: UpdatePostData;
      res: {
        /**
         * OK
         */
        200: PostResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
    delete: {
      req: RemovePostData;
      res: {
        /**
         * No content
         */
        204: void;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/posts/{id}/vote": {
    post: {
      req: VotePostData;
      res: {
        /**
         * No content
         */
        204: void;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
  "/posts/{id}/unvote": {
    delete: {
      req: UnvotePostData;
      res: {
        /**
         * No content
         */
        204: void;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: unknown;
      };
    };
  };
};
